# -*- coding: utf-8 -*-
"""TimeSeries_Farhan.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dAZe62jbyuFOkLSQ1p6eTu8hO-Wyg709

*   Nama: Farhan
*   Email: farhanarafiq2401@gmail.com
*   Kota: Pontianak
"""

import pandas as pd

df = pd.read_csv('temperature.csv')

df.head

# untuk melihat apakah terdapat missing value
# true berarti ada, false berarti tidak ada
df.isnull().values.any()

import matplotlib.pyplot as plt

dates = df['datetime'].values
temp = df['Portland'].values

plt.figure(figsize=(15,5))
plt.plot(dates, temp)
plt.title('Temperature in Portland',
          fontsize=20);

from sklearn.model_selection import train_test_split

# membagi data training dan data testing
x_train, x_test, y_train, y_test = train_test_split(temp, dates, train_size=0.8, test_size = 0.2, shuffle = False )

sd = (df['Portland'].max() - df['Portland'].min()) * 10/100
print(sd)

import tensorflow as tf

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

from tensorflow.keras.models import Sequential

from tensorflow.keras.layers import LSTM,Dense,Bidirectional,Dropout

# pemodelan sequential dengan menerapkan LSTM
model = tf.keras.models.Sequential([
  tf.keras.layers.LSTM(60, return_sequences=True),
  tf.keras.layers.Bidirectional(LSTM(60)),
  tf.keras.layers.Dense(30, activation="relu"),
  tf.keras.layers.Dense(10, activation="relu"),
  tf.keras.layers.Dense(1)
])

optimizer = tf.keras.optimizers.SGD(lr=1.0000e-04, momentum=0.9)

model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])

train_set = windowed_dataset(x_train, window_size=60, batch_size=100, shuffle_buffer=1000)
val_set = windowed_dataset(x_test, window_size=60, batch_size=100, shuffle_buffer=1000)

class myCallback(tf.keras.callbacks.Callback): 
    def on_epoch_end(self, epoch, logs={}): 
        if(logs.get('mae') < 5.0149):
            self.model.stop_training = True 
            print("\nMAE pada model telah < 10% skala data") 
   
callbacks = myCallback()

tf.keras.backend.set_floatx('float64')

history = model.fit(train_set,
                    epochs=200,
                    validation_data = val_set,
                    callbacks=[callbacks])

# membuat plot loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Loss Model')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

# membuat plot akurasi
plt.plot(history.history['mae'])
plt.plot(history.history['val_mae'])
plt.title('Akurasi Model')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()